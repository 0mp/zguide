#! /usr/bin/perl
#   z2w - convert ZeroMQ document to Wikidot format
#   - converts [[code type="textdiagram"]] via ditaa
#   - converts zmq_something(3) into URL to http://api.zeromq.org
#   Eventually meant to produce print-ready output via tex
#
#   Usage: z2w < docfile
#
#   Creates Wikidot file in wdtemp.txt and images in images/.
#   By Pieter Hintjens, free for remixing without conditions.
#   Images are stored in the github repository at
#   http://github.com/imatix/0MQGuide.
#

$git = "http://github.com/imatix/zguide";
$branch = "master";
@languages = ('Ada', 'Basic', 'C', 'C++', 'C#', 'Common Lisp', 'Erlang',
              'Go', 'Haskell', 'Java', 'Lua', 'Objective-C', 'ooc',
              'Perl', 'PHP', 'Python', 'Ruby');
%extension = ('Ada' => 'ada',
              'Basic' => 'bas',
              'C' => 'c',
              'C++' => 'cpp',
              'C#' => 'cs',
              'Common Lisp' => 'lisp',
              'Erlang' => 'erl',
              'Go' => 'go',
              'Haskell' => 'hs',
              'Java' => 'java',
              'Lua' => 'lua',
              'Objective-C' => 'm',
              'ooc' => 'ooc',
              'Perl' => 'pl',
              'PHP' => 'php',
              'Python' => 'py',
              'Ruby' => 'rb' );

sub get_filename {
    local ($name, $language) = @_;          #   Get arguments
    return "examples/$language/$name.$extension{$language}";
}

#   Ensure all languages have an examples directory
foreach (@languages) {
    if (!-d "examples/$_") {
        mkdir ("examples/$_");
    }
    if (!-f "examples/$_/README") {
        die "Can't create examples/$_/README: $!"
            unless open (README, ">examples/$_/README");
        print README "Examples in $_\n";
        print README "See LICENSE in examples directory\n";
    }
}

die "Can't create wdtemp.txt: $!"
    unless open (WDTEMP, ">wdtemp.txt");
die "Can't create images.html: $!"
    unless open (IMAGES, ">images.html");

print WDTEMP "[!-- Generated documentation file, do not edit --]\n";
print IMAGES "<html>\n";

while (<>) {
    chop;
    if (/\[\[code type=\"(.+)\" title=\"(.+)\" name=\"(.+)\"\]\]/) {
        $type = $1;
        $title = $2;
        $name = $3;
        print WDTEMP "$_\n";

        #   Discard any real contents of code block
        while (<>) {
            last if /\[\[\/code\]\]/;
            print "W: discarding $type code for $name\n";
        }
        $filename = get_filename ($name, $type);
        die "Can't open $filename: $!"
            unless open (SOURCE, $filename);
        print WDTEMP $_
            while <SOURCE>;
        close (SOURCE);
        print WDTEMP "[[>]]\n";
        print WDTEMP "[[collapsible show=\"All languages\" hide=\"Hide languages\"]]\n";

        foreach (@languages) {
            $filename = get_filename ($name, $_);
            print WDTEMP "* [*$git/blob/$branch/$filename $title in $_]\n";

            #   Create empty example if necessary
            if (!-f $filename) {
                die "Can't open $filename: $!"
                    unless open (SOURCE, ">$filename");
                print SOURCE<<"EOF";
No-one has translated the $name example into $_ yet.  Be the first to create
$name in $_ and get one free Internet!  If you're the author of the $_
binding, this is a great way to get people to use 0MQ in $_.

To submit a translation, just email it to zeromq-dev@lists.zeromq.org.
Subscribe to this list at http://lists.zeromq.org/mailman/listinfo/zeromq-dev.
EOF
                close (SOURCE);
            }
        }
        print WDTEMP "[[/collapsible]]\n";
        print WDTEMP "[[/>]]\n";
    }
    elsif ($_ eq "[[code type=\"textdiagram\"]]") {
        #   Text diagram
        $image = $image + 1;
        print IMAGES "<pre class=\"textdiagram\" id=\"fig$image\">\n";
        while (<>) {
            chop;
            last if /\[\[\/code\]\]/;
            s/#/$image/;
            print IMAGES "$_\n";
        }
        print IMAGES "</pre>\n";
        #   Link to resource in git, nice way to upload images
        print WDTEMP "[[=image $git/raw/$branch/images/fig$image.png]]\n";
    }
    else {
        #   Normal text
        s/0MQ/Ã˜MQ/g;
        s/0\\MQ/0MQ/g;
        $remainder = $_;
        while ($remainder =~ /zmq_([^(]+)\(3\)/) {
            print WDTEMP $`;
            print WDTEMP "[http://api.zeromq.org/zmq_$1.html zmq_$1(3)]";
            $remainder = $';
        }
        print WDTEMP $remainder."\n";
    }
}
print IMAGES "</html>\n";
close (IMAGES);
close (WDTEMP);

system ("rm -f images/*");
system ("java -jar ditaa0_9.jar images.html -o -h -E output.html");
#   Need to trim twice for reasons I don't care to explore
system ("mogrify -trim images/*.png");
system ("mogrify -trim images/*.png");
system ("rm output.html images.html");
