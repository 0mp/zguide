Chapter 1

Figure 1-1: Request-Reply
Figure 1-2: A terrible accident...
Figure 1-3: A 0MQ string
Figure 1-4: Publish-Subscribe
Figure 1-5: Parallel Pipeline
Figure 1-6: Fair Queuing
Figure 1-7: Messaging as it Starts
Figure 1-8: Messaging as it Becomes
Figure 1-9: Missing Message Problem Solver

__________

Chapter 2

Figure 2-1: TCP sockets are 1 to 1
Figure 2-2: 0MQ Sockets are N to N
Figure 2-3: HTTP On the Wire
Figure 2-4: 0MQ On the Wire
Figure 2-5: Parallel Pipeline with Kill Signaling
Figure 2-6: Small-scale Pub-Sub Network
Figure 2-7: Pub-Sub Network with a Proxy
Figure 2-8: Extended Publish-Subscribe
Figure 2-9: Load-balancing of Requests
Figure 2-10: Extended Request-reply
Figure 2-11: Request-reply Broker
Figure 2-12: Pub-Sub Forwarder Proxy
Figure 2-13: Multithreaded Server
Figure 2-14: The Relay Race
Figure 2-15: Pub-Sub Synchronization
Figure 2-16: Pub-Sub Envelope with Separate Key
Figure 2-17: Pub-Sub Envelope with Sender Address

__________

Chapter 3

Figure 3-1: Single-hop Request-reply Envelope
Figure 3-2: Multihop Request-reply Envelope
Figure 3-3: ROUTER Invents a UUID
Figure 3-4: ROUTER uses Identity If It knows It
Figure 3-5: ROUTER-to-DEALER Custom Routing
Figure 3-6: Routing Envelope for DEALER
Figure 3-7: ROUTER to REQ Custom Routing
Figure 3-8: Routing Envelope for REQ
Figure 3-9: ROUTER-to-REP Custom Routing
Figure 3-10: Routing Envelope for REP
Figure 3-11: Basic Request-reply
Figure 3-12: Stretched Request-reply
Figure 3-13: Stretched Request-reply with LRU
Figure 3-14: Message that Client Sends
Figure 3-15: Message Coming in on Frontend
Figure 3-16: Message Sent to Backend
Figure 3-17: Message Delivered to Worker
Figure 3-18: Asynchronous Client-Server
Figure 3-19: Detail of Asynchronous Server
Figure 3-20: Cluster Architecture
Figure 3-21: Multiple Clusters
Figure 3-22: Idea 1 - Cross-connected Workers
Figure 3-23: Idea 2 - Brokers Talking to Each Other
Figure 3-24: Cross-connected Brokers in Federation Model
Figure 3-25: Broker Socket Arrangement
Figure 3-26: The State Flow
Figure 3-27: The Flow of Tasks

__________

Chapter 4

Figure 4-1: The Lazy Pirate Pattern
Figure 4-2: The Simple Pirate Pattern
Figure 4-3: The Paranoid Pirate Pattern
Figure 4-4: The Majordomo Pattern
Figure 4-5: The Titanic Pattern
Figure 4-6: High-availability Pair, Normal Operation
Figure 4-7: High-availability Pair During Failover
Figure 4-8: Binary Star Finite State Machine
Figure 4-9: The Freelance Pattern

__________

Chapter 5

Figure 5-1: The Simple Black Box Pattern
Figure 5-2: Mad Black Box Pattern
Figure 5-3: Simplest Clone Model
Figure 5-4: State Replication
Figure 5-5: Republishing Updates
Figure 5-6: Clone Client Finite State Machine
Figure 5-7: High-availability Clone Server Pair

__________

Chapter 6

Figure 6-1: The 'Start' State
Figure 6-2: The 'Authenticated' State
Figure 6-3: The 'Ready' State

__________

Chapter 7

No figures

__________

Chapter 8

Figure 8-1: ZRE discovery message
Figure 8-2: ZyRE Tester Tool

__________

